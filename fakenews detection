import pandas as pd
import re
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier, LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import joblib

# 1. Load Data
df_fake = pd.read_csv('Fake.csv')
df_true = pd.read_csv('True.csv')

# 2. Add Labels
df_fake['label'] = 'FAKE'
df_true['label'] = 'REAL'

# 3. Combine Data
df = pd.concat([df_fake, df_true])

# 4. Clean Text
def clean_text(text):
    text = re.sub(r'http\S+', '', text)  # Remove URLs
    text = re.sub(r'[^a-zA-Z ]', '', text)  # Keep only letters
    text = text.lower()  # Lowercase
    return text

df['text'] = df['text'].apply(clean_text)

# 5. Split Data
X_train, X_test, y_train, y_test = train_test_split(
    df['text'], df['label'], test_size=0.2, random_state=7
)

# 6. Define Pipeline (PassiveAggressiveClassifier)
pipeline_pac = Pipeline([
    ('tfidf', TfidfVectorizer(stop_words='english', max_df=0.7)),
    ('clf', PassiveAggressiveClassifier(max_iter=50)),
])

# 7. Train Model
pipeline_pac.fit(X_train, y_train)

# 8. Predict & Evaluate
y_pred_pac = pipeline_pac.predict(X_test)
accuracy_pac = accuracy_score(y_test, y_pred_pac)
print(f'Passive Aggressive Classifier Accuracy: {round(accuracy_pac * 100, 2)}%')
print('\nClassification Report:\n', classification_report(y_test, y_pred_pac))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred_pac)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=['FAKE', 'REAL'],
            yticklabels=['FAKE', 'REAL'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix - Passive Aggressive Classifier')
plt.show()

# 9. Try Logistic Regression
pipeline_lr = Pipeline([
    ('tfidf', TfidfVectorizer(stop_words='english', max_df=0.7)),
    ('clf', LogisticRegression(max_iter=1000)),
])

pipeline_lr.fit(X_train, y_train)
y_pred_lr = pipeline_lr.predict(X_test)
accuracy_lr = accuracy_score(y_test, y_pred_lr)
print(f'Logistic Regression Accuracy: {round(accuracy_lr * 100, 2)}%')
print('\nClassification Report:\n', classification_report(y_test, y_pred_lr))

# 10. Save the better model
# You can choose which model performed better
joblib.dump(pipeline_pac, 'fake_news_pac_model.pkl')
joblib.dump(pipeline_lr, 'fake_news_lr_model.pkl')

print("Models saved as 'fake_news_pac_model.pkl' and 'fake_news_lr_model.pkl'.")

# 11. Load and Test with New Text
def predict_news(text, model):
    cleaned = clean_text(text)
    prediction = model.predict([cleaned])[0]
    return prediction

# Example usage:
# Load saved model
model_loaded = joblib.load('fake_news_pac_model.pkl')
new_text = "Breaking: Government launches new policy to fight climate change."
print(f"Prediction for new text: {predict_news(new_text, model_loaded)}")
